package com.parking.domain.michap21;
import com.parking.service.michap21.ParkingTicketLookupService;


public class Terminal {

	private Sale sale;
	private ParkingTicket inputParkingTicket;
	private static final int RATE_PER_MINUTE = 5;
	private float paymentOwed;
	

	public Sale getSale() {
		return sale;
	}


	public void setSale(Sale sale) {
		this.sale = sale;
	}


	public int getRatePerMinute() {
		return RATE_PER_MINUTE;
	}


	public float getPaymentOwed() {
		return paymentOwed;
	}


	public void setPaymentOwed(float paymentOwed) {
		this.paymentOwed = paymentOwed;
	}
	
	
	public ParkingTicket getInputParkingTicket() {
		return inputParkingTicket;
	}


	public void setInputParkingTicket(ParkingTicket inputParkingTicket) {
		this.inputParkingTicket = inputParkingTicket;
	}


	public String calculatePayment(ParkingTicket userParkingTicket) {
		
		if(userParkingTicket.getMinutesActive() == 0){
			
			userParkingTicket.setRedemptionTime(System.currentTimeMillis());
			long millisecondsParked = calculateTimeParked(userParkingTicket);		
			paymentOwed = convertMillisecondsToMinutes(millisecondsParked) * getRatePerMinute();
			String amountOwed = String.format("%.2f", paymentOwed);
			this.setPaymentOwed(Float.parseFloat(amountOwed));
			this.setInputParkingTicket(userParkingTicket);
						
			return amountOwed;	
		}
		
		 return "";						
	}
	
	

	public float calculateBalance(float amountPaid) {
		
		float balance = amountPaid - this.getPaymentOwed();
		
		return balance;
	}

	

	public void storePaymentRecord(ParkingTicketLookupService parkingTicketLookupService) {

		ParkingTicket currentTicket = parkingTicketLookupService.getParkingTicketRecord(this.getInputParkingTicket().getParkingTicketId());
		currentTicket.setStatus("Redeemed");
		currentTicket.setFundsGenerated(this.getPaymentOwed());
		
	}
	
	
    private float convertMillisecondsToMinutes(long millisecondsParked){
		
		float seconds = (float) ((millisecondsParked/1000) %60);

		float minutes = (float) (((millisecondsParked-seconds)/1000) /60);
		
		String strDouble = String.format("%.2f", minutes);
		
		System.out.println("strDouble is equal to " + strDouble);
				
		return 	Float.parseFloat(strDouble);	
		
	 }
	
	
	
	 private long calculateTimeParked(ParkingTicket parkingTicket){
		
		long difference = parkingTicket.getRedemptionTime() - parkingTicket.getCreationTime();
		
		parkingTicket.setMinutesActive(difference);
		
		return difference;	
		
	 }


	public boolean isPaymentSufficient(float parsedPayment) {
		
		if(parsedPayment >= this.getPaymentOwed()){
			
			return true;
		}
		
		return false;
	}
	
}
