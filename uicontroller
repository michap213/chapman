package com.parking.controllers.michap21;

import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JTextField;
import java.awt.Color;
import javax.swing.JRadioButton;
import java.awt.Font;
import javax.swing.JSeparator;
import javax.swing.JComboBox;
import javax.swing.SwingConstants;

import com.parking.domain.michap21.ParkingGarage;
import com.parking.domain.michap21.ParkingTicket;
import com.parking.service.michap21.ParkingTicketLookupService;
import com.parking.service.michap21.ParkingTicketLookupServiceImpl;



public class UIController {

	//GUI Components
	private JFrame frame;
	private JTextField ticketIdTextField;
	private JLabel generatedTicketId;
	private JLabel parkingSpacesAvailableNumberLabel;
	private JLabel lblYourTicketNumber;
	private JLabel errorLabel;
	private JButton btnNewParkingTicket;
	private JLabel lblEnterYourdigit;
	private JButton btnSubmitTicketNumber;
	private JLabel paymentMessageLabel;
	private JLabel lblSelectMethodOf;
	private JLabel garageTotalSales;
	private JButton submitPaymentButton;
	private JTextField paymentInputField;
	private JRadioButton rdbtnCash;
	private JRadioButton rdbtnCreditCard; 
	private JButton btnQuery;
	
	
	//Controllers and services
	private CreateParkingTicketController createParkingTicketController;
	private CalculateParkingTicketController calculateParkingTicketController;
	private SubmitParkingTicketController submitParkingTicketController;
	private GarageStatusController garageStatusController;
	private ParkingTicketLookupService parkingTicketLookupService = new ParkingTicketLookupServiceImpl();
	private JSeparator separator_2;
	private JComboBox comboBox;
	private JLabel lblNewLabel;
	private JLabel lblCreated;
	private JLabel lblMsaleAmount;
	private JLabel lblDate;
	private JSeparator separator_3;
	//private LookupServiceController lookupServiceController = new LookupServiceController();


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					UIController window = new UIController();				
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public UIController() {
		
		ParkingGarage parkingGarage = new ParkingGarage();
		
		createParkingTicketController = new CreateParkingTicketController(parkingGarage);
		calculateParkingTicketController = new CalculateParkingTicketController(parkingGarage);
		submitParkingTicketController = new SubmitParkingTicketController(parkingGarage);
		garageStatusController = new GarageStatusController(parkingGarage);
		
		initialize();
		
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame("Parking System");
		frame.getContentPane().setForeground(Color.BLACK);
		frame.setBounds(100, 100, 992, 632);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);	
		
		initiateGUIComponents();
		
		// New Parking Ticket Button	
		btnNewParkingTicket.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
					
				initiateNewParkingTicketAction();		
			}			
		});
		
		
		btnSubmitTicketNumber.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
			
				initiateSubmitTicketNumberAction();
			}
		});
		
				    
		 final ButtonGroup group = new ButtonGroup();
		    group.add(rdbtnCash);
		    group.add(rdbtnCreditCard);
		    
		    separator_3 = new JSeparator();
		    separator_3.setBounds(640, 163, 326, 2);
		    frame.getContentPane().add(separator_3);
		    
		    rdbtnCash.addActionListener(new ActionListener() {
		    	
				public void actionPerformed(ActionEvent e) {
					
					paymentMessageLabel.setText("Please enter a cash amount (decimal)");				
				}
			});
		    
		    rdbtnCreditCard.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					
					paymentMessageLabel.setText("Please enter your 16 digit account number");
				}
			});
		
	   
		   submitPaymentButton.addActionListener(new ActionListener() {
			
			  public void actionPerformed(ActionEvent e) {
								
	               initiateSubmitPaymentAction(group);
			  }
	
		});		
		
	}
	
	
	
    protected void initiateNewParkingTicketAction() {
		
		paymentMessageLabel.setText("");
		ParkingTicket ticket = createParkingTicketController.createParkingTicket();
		
		if(ticket != null){
			
			generatedTicketId.setText(ticket.getParkingTicketId() + "");
			parkingSpacesAvailableNumberLabel.setText(garageStatusController.getAvailableParkingSpaces() + "");
			errorLabel.setText("");	
			parkingTicketLookupService.addParkingTicketRecord(ticket);

		}
	    else{
		
		  generatedTicketId.setText("");					
		  lblYourTicketNumber.setText("No Parking Available.");				
	    }
		
	}
    
    
    
    protected void initiateSubmitTicketNumberAction() {
		
		String inputTicketNumber = ticketIdTextField.getText();
		errorLabel.setForeground(Color.RED);
		
		if(inputTicketNumber.length() != 5 || inputTicketNumber == null){
			
			errorLabel.setText("Enter a valid parking ticket id.");

		}
		else{
			
			errorLabel.setText("");
			int inputParkingTicketId = 0;
			
			try{
				
			   inputParkingTicketId = Integer.parseInt(inputTicketNumber);
			}
			catch(NumberFormatException exception){
				
				errorLabel.setText("Enter a valid parking ticket id.");
			}
			
			ParkingTicket retrievedParkingTicket = parkingTicketLookupService.getParkingTicketRecord(inputParkingTicketId);
			
			if(retrievedParkingTicket == null){
				
				errorLabel.setText("The ticket id you entered was not found.");
			}
			else{
				
				String paymentOwed = calculateParkingTicketController.calculatePayment(retrievedParkingTicket);
				
				if(paymentOwed.equals("")){
					
					errorLabel.setText("This ticket has already been redeemed.");
				}
				else{
					
					generatedTicketId.setText("");	
					errorLabel.setForeground(Color.BLACK);
					ticketIdTextField.setText("");
					errorLabel.setText("At $" + garageStatusController.getRatePerMinute() + " per minute, you owe $" + paymentOwed);

				}
			}
		}
    }
	
	
	
	protected void initiateSubmitPaymentAction(ButtonGroup group) {
		
		String paymentOrCardNumber = paymentInputField.getText();
			
		if(group.getSelection().getActionCommand().equals("Cash")){
			
			boolean paymentIsSufficient = false;
						
			try{
				
				paymentIsSufficient = submitParkingTicketController.isPaymentSufficient(paymentOrCardNumber);
				
				if(paymentIsSufficient){
					
					submitCashPayment(paymentOrCardNumber);
				}
				else{
					
					paymentMessageLabel.setText("The amount entered is insufficient. Try again.");
				}
			}
			catch(NumberFormatException exception){
				
				paymentMessageLabel.setText("Please enter a valid dollar amount.");
			}					
			
		}
		else if(group.getSelection().getActionCommand().equals("Credit")){
			
			boolean entrySuccessful = false;

				try{
					
					entrySuccessful = submitParkingTicketController.submitCreditPayment(paymentOrCardNumber, parkingTicketLookupService);
					
				}
				catch(NumberFormatException e1){
					
					paymentMessageLabel.setText("Please enter a valid 16 digit number.");

				}
				
				if(entrySuccessful){						
				
					paymentMessageLabel.setText("Payment successful");
					errorLabel.setText("");
					paymentInputField.setText("");
					garageTotalSales.setText("$" + parkingTicketLookupService.getAllParkingTicketSales() + "");
					parkingSpacesAvailableNumberLabel.setText(garageStatusController.getAvailableParkingSpaces() + "");
					//TODO: update number of customers using garageStatusController. 
				}
				else{
					
					paymentMessageLabel.setText("Card number entered is invalid.");
				}
										
		}
		else{
			
			paymentMessageLabel.setText("Please choose a payment type.");

		}
		
	}
	
	
		
	private void submitCashPayment(String paymentOrCardNumber) {
	
		String balance = submitParkingTicketController.submitCashPayment(paymentOrCardNumber, parkingTicketLookupService);
		
		if(!balance.equals("0.00")){
			
			paymentMessageLabel.setText("Your change due is $" + balance + ". Please exit.");
			paymentInputField.setText("");
			errorLabel.setText("");
			garageTotalSales.setText("$" + parkingTicketLookupService.getAllParkingTicketSales() + "");
			parkingSpacesAvailableNumberLabel.setText(garageStatusController.getAvailableParkingSpaces() + "");
		}
		else{
			
			paymentMessageLabel.setText("Payment successful. Please exit the garage.");
			paymentInputField.setText("");
			errorLabel.setText("");
			garageTotalSales.setText("$" + parkingTicketLookupService.getAllParkingTicketSales() + "");
			parkingSpacesAvailableNumberLabel.setText(garageStatusController.getAvailableParkingSpaces() + "");
		}
		
	}

	
	
	private void initiateGUIComponents(){
						
		JLabel lblGarageStatus = new JLabel("Garage Status:");
		lblGarageStatus.setBounds(25, 23, 99, 27);
		lblGarageStatus.setFont(new Font("Tahoma", Font.PLAIN, 15));
		frame.getContentPane().add(lblGarageStatus);
		
		JLabel lblParkingSpacesAvaiable = new JLabel("Parking spaces avaiable:");
		lblParkingSpacesAvaiable.setBounds(46, 61, 157, 14);
		lblParkingSpacesAvaiable.setFont(new Font("Tahoma", Font.PLAIN, 13));
		frame.getContentPane().add(lblParkingSpacesAvaiable);
		
		JLabel lblSales = new JLabel("Sales:");
		lblSales.setBounds(46, 88, 46, 14);
		lblSales.setFont(new Font("Tahoma", Font.PLAIN, 13));
		frame.getContentPane().add(lblSales);
		
		JLabel lblNumberOfCustomers = new JLabel("Number of Customers:");
		lblNumberOfCustomers.setBounds(46, 113, 144, 14);
		lblNumberOfCustomers.setFont(new Font("Tahoma", Font.PLAIN, 13));
		frame.getContentPane().add(lblNumberOfCustomers);
		
		JLabel lblExitGate = new JLabel("Exit Gate");
		lblExitGate.setBounds(425, 33, 99, 27);
		lblExitGate.setFont(new Font("Tahoma", Font.PLAIN, 20));
		frame.getContentPane().add(lblExitGate);
		
		JLabel lblEntryGate = new JLabel("Entry Gate");
		lblEntryGate.setForeground(new Color(0, 0, 0));
		lblEntryGate.setBounds(96, 191, 99, 27);
		lblEntryGate.setFont(new Font("Tahoma", Font.PLAIN, 20));
		frame.getContentPane().add(lblEntryGate);
		
		JSeparator separator = new JSeparator(JSeparator.VERTICAL);
		separator.setBounds(302, 11, 81, 572);
		frame.getContentPane().add(separator);
		
		JSeparator separator_1 = new JSeparator();
		separator_1.setBounds(10, 163, 286, 2);
		frame.getContentPane().add(separator_1);
		
		paymentInputField = new JTextField();
		paymentInputField.setBounds(388, 426, 168, 37);
		frame.getContentPane().add(paymentInputField);
		paymentInputField.setColumns(10);
		 		 
		generatedTicketId = new JLabel("");
		generatedTicketId.setBounds(123, 401, 80, 39);
		generatedTicketId.setFont(new Font("Tahoma", Font.PLAIN, 20));
		frame.getContentPane().add(generatedTicketId);
		 
		parkingSpacesAvailableNumberLabel = new JLabel("");
		parkingSpacesAvailableNumberLabel.setBounds(192, 62, 46, 14);
		parkingSpacesAvailableNumberLabel.setFont(new Font("Tahoma", Font.PLAIN, 13));
		frame.getContentPane().add(parkingSpacesAvailableNumberLabel);
		parkingSpacesAvailableNumberLabel.setText(garageStatusController.getAvailableParkingSpaces() + "");
		
	    lblYourTicketNumber = new JLabel("Your Parking Ticket Number is:");
		lblYourTicketNumber.setBounds(68, 344, 299, 27);
		frame.getContentPane().add(lblYourTicketNumber);
					
		errorLabel = new JLabel("");
		errorLabel.setBounds(385, 113, 244, 22);
		frame.getContentPane().add(errorLabel);
		
		btnNewParkingTicket = new JButton("Dispense Ticket");
		btnNewParkingTicket.setBackground(Color.GRAY);
		btnNewParkingTicket.setForeground(Color.BLACK);
		btnNewParkingTicket.setBounds(68, 257, 163, 55);
		frame.getContentPane().add(btnNewParkingTicket);	
		
		ticketIdTextField = new JTextField();
		ticketIdTextField.setFont(new Font("Tahoma", Font.PLAIN, 18));
		ticketIdTextField.setBounds(388, 153, 163, 37);
		frame.getContentPane().add(ticketIdTextField);
		ticketIdTextField.setColumns(10);	
		
		lblEnterYourdigit = new JLabel("Enter your 5-digit ticket number:");
		lblEnterYourdigit.setBounds(388, 83, 307, 27);
		frame.getContentPane().add(lblEnterYourdigit);
		
		btnSubmitTicketNumber = new JButton("Submit Ticket Number");
		btnSubmitTicketNumber.setBackground(Color.GRAY);
		btnSubmitTicketNumber.setBounds(388, 219, 163, 55);
		frame.getContentPane().add(btnSubmitTicketNumber);
		
		paymentMessageLabel = new JLabel("");
		paymentMessageLabel.setBounds(380, 401, 249, 14);
		frame.getContentPane().add(paymentMessageLabel);
			
		lblSelectMethodOf = new JLabel("Select method of payment:");
		lblSelectMethodOf.setBounds(388, 317, 286, 22);
		frame.getContentPane().add(lblSelectMethodOf);
		
	    garageTotalSales = new JLabel("$0");
	    garageTotalSales.setBounds(91, 89, 112, 14);
	    frame.getContentPane().add(garageTotalSales);
	
	    submitPaymentButton = new JButton("Submit Payment");
	    submitPaymentButton.setBackground(Color.GRAY);
	    submitPaymentButton.setBounds(388, 501, 168, 55);	
	    frame.getContentPane().add(submitPaymentButton);
	    
		rdbtnCash = new JRadioButton("Cash");
		rdbtnCash.setActionCommand("Cash");
		rdbtnCash.setBounds(388, 346, 109, 23);
		frame.getContentPane().add(rdbtnCash);
		
		rdbtnCreditCard = new JRadioButton("Credit Card");
		rdbtnCreditCard.setActionCommand("Credit");
		rdbtnCreditCard.setBounds(388, 372, 109, 23);
		frame.getContentPane().add(rdbtnCreditCard);
		
		separator_2 = new JSeparator(SwingConstants.VERTICAL);
	    separator_2.setBounds(634, 11, 2, 572);
	    frame.getContentPane().add(separator_2);
	    
	    comboBox = new JComboBox();
	    comboBox.setBounds(686, 86, 228, 20);
	    frame.getContentPane().add(comboBox);
	    
	    lblNewLabel = new JLabel("Ticket ID");
	    lblNewLabel.setBounds(649, 176, 56, 14);
	    frame.getContentPane().add(lblNewLabel);
	    
	    lblCreated = new JLabel("Minutes Active");
	    lblCreated.setBounds(788, 176, 89, 14);
	    frame.getContentPane().add(lblCreated);
	    
	    lblMsaleAmount = new JLabel("Sale Amount");
	    lblMsaleAmount.setBounds(895, 176, 81, 14);
	    frame.getContentPane().add(lblMsaleAmount);
	    
	    lblDate = new JLabel("Date");
	    lblDate.setBounds(732, 176, 36, 14);
	    frame.getContentPane().add(lblDate);
	    
	    JLabel recordLineItem_1 = new JLabel("");
	    recordLineItem_1.setBounds(634, 201, 342, 17);
	    frame.getContentPane().add(recordLineItem_1);
	    
	    JLabel recordLineItem_2 = new JLabel("");
	    recordLineItem_2.setBounds(634, 219, 342, 17);
	    frame.getContentPane().add(recordLineItem_2);
	    
	    JLabel recordLineItem_3 = new JLabel("");
	    recordLineItem_3.setBounds(634, 239, 342, 17);
	    frame.getContentPane().add(recordLineItem_3);
	    
	    JLabel recordLineItem_4 = new JLabel("");
	    recordLineItem_4.setBounds(634, 257, 342, 17);
	    frame.getContentPane().add(recordLineItem_4);
	    
	    JLabel recordLineItem_5 = new JLabel("");
	    recordLineItem_5.setBounds(634, 277, 342, 17);
	    frame.getContentPane().add(recordLineItem_5);
	    
	    JLabel recordLineItem_6 = new JLabel("");
	    recordLineItem_6.setBounds(634, 295, 342, 17);
	    frame.getContentPane().add(recordLineItem_6);
	    
	    JLabel recordLineItem_7 = new JLabel("");
	    recordLineItem_7.setBounds(634, 317, 342, 17);
	    frame.getContentPane().add(recordLineItem_7);
	    
	    JLabel recordLineItem_8 = new JLabel("");
	    recordLineItem_8.setBounds(634, 335, 342, 17);
	    frame.getContentPane().add(recordLineItem_8);
	    
	    JLabel recordLineItem_9 = new JLabel("");
	    recordLineItem_9.setBounds(634, 354, 342, 17);
	    frame.getContentPane().add(recordLineItem_9);
	    
	    JLabel recordLineItem_10 = new JLabel("");
	    recordLineItem_10.setBounds(634, 376, 342, 17);
	    frame.getContentPane().add(recordLineItem_10);
	    
	    btnQuery = new JButton("Query");
	    btnQuery.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent arg0) {
	    		
	    		//IMPLEMENT QUERY FUNCTIONALITY
	    	}
	    });
	    btnQuery.setBounds(750, 119, 89, 23);
	    frame.getContentPane().add(btnQuery);
		
	}
}
